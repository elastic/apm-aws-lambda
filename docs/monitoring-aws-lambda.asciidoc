[[monitoring-aws-lambda]]
= Monitoring AWS Lambda Functions

Elastic APM lets you monitor your AWS Lambda functions.
The natural integration of {apm-guide-ref}/apm-distributed-tracing.html[distributed tracing] into your AWS Lambda functions provides insights into the functions' execution and runtime behavior as well as their relationships and dependencies to other services.

To get started with the setup of Elastic APM for your Lambda functions, checkout the language-specific guides:

* {apm-node-ref}/lambda.html[Quick Start with APM on AWS Lambda - Node.js]
* {apm-py-ref}/lambda-support.html[Quick Start with APM on AWS Lambda - Python]
* {apm-java-ref}/aws-lambda.html[Quick Start with APM on AWS Lambda - Java]

Learn more about the <<aws-lambda-arch, architecture>> of Elastic APM for AWS Lambda.

[[aws-lambda-arch]]
== APM Architecture for AWS Lambda

AWS Lambda uses a special execution model to provide a scalable, on-demand compute service for code execution. In particular, AWS freezes the execution environment of a lambda function when no active requests are being processed. This execution model poses additional requirements on APM in the context of AWS Lambda functions:

1. To avoid data loss, APM data collected by APM agents needs to be flushed before the execution environment of a lambda function is frozen.
2. Flushing APM data must be fast so as not to impact the response times of lambda function requests.

To accomplish the above, Elastic's APM Agents instrument AWS Lambda functions and dispatch APM data via an https://docs.aws.amazon.com/lambda/latest/dg/using-extensions.html[AWS Lambda Extension].

Normally, during the execution of a Lambda function, there's only a single language process running in the AWS Lambda execution environment.  With an AWS Lambda Extension, Lambda users run a _second_ process alongside their main service/application process.

image:images/architecture-white.png[image showing data flow from lambda function, to extension, to APM Server]

By using an AWS Lambda Extension, Elastic APM Agents can send data to a local Lambda Extension process, and that process will forward data on to APM Server asynchronously. The Lambda Extension ensures that any potential latency between the Lambda function and the APM Server instance will not cause latency in the request flow of the Lambda function itself.

[[aws-lambda-config-options]]
== Configuration Options for APM on AWS Lambda

The recommended way of configuring the APM Lambda Extension and the APM Agents on AWS Lambda is through the Lambda function's environment variables.

The configuration options for the APM Agents are documented in the corresponding language agents:

* {apm-node-ref}/configuration.html[Configuration options - Node.js APM Agent]
* {apm-py-ref}/configuration.html[Configuration options - Python APM Agent]
* {apm-java-ref}/configuration.html[Configuration options - Java APM Agent]

The following configuration options are particularly relevant for Elastic's APM on AWS Lambda:

[[aws-lambda-extension]]
=== `ELASTIC_APM_LAMBDA_APM_SERVER`
This required config option controls where the Lambda extension will ship data. This should be the URL of the final APM Server destination for your telemetry.

[[aws-lambda-config-authentication-keys]]
=== `ELASTIC_APM_SECRET_TOKEN` or `ELASTIC_APM_API_KEY`
One of these (or, alternatively, the corresponding settings for the AWS Secrets Manager IDs) needs to be set as the authentication method that the extension uses when sending data to the URL configured via `ELASTIC_APM_LAMBDA_APM_SERVER`. Alternatively, you can store your APM Server credentials <<aws-lambda-secrets-manager, using the AWS Secrets Manager>> and use the <<aws-lambda-config-secrets-manager-options>> config options, instead. Sending data to the APM Server if none of these options is set is possible, but your APM agent must be allowed to send data to your APM server in https://www.elastic.co/guide/en/apm/guide/current/configuration-anonymous.html[anonymous mode].

[[aws-lambda-config-secrets-manager-options]]
=== `ELASTIC_APM_SECRETS_MANAGER_SECRET_TOKEN_ID` or `ELASTIC_APM_SECRETS_MANAGER_API_KEY_ID`
Instead of specifying the <<aws-lambda-config-authentication-keys>> as plain text in your Lambda environment variables, you can <<aws-lambda-secrets-manager, use the AWS Secrets Manager>> to securely store your APM authetication keys. The `ELASTIC_APM_SECRETS_MANAGER_API_KEY_ID` or `ELASTIC_APM_SECRETS_MANAGER_SECRET_TOKEN_ID` config options allow you to specify the Secrets Manager's secret id of the stored APM API key or APM secret token, respectively, to be used by the APM Lambda Extension for authentication.

`ELASTIC_APM_SECRETS_MANAGER_SECRET_TOKEN_ID` takes precedence over <<aws-lambda-config-authentication-keys, `ELASTIC_APM_SECRET_TOKEN`>>, and `ELASTIC_APM_SECRETS_MANAGER_API_KEY_ID` over <<aws-lambda-config-authentication-keys, `ELASTIC_APM_API_KEY`>>, respectively.

=== `ELASTIC_APM_SERVICE_NAME`
The configured name of your application or service.  The APM Agent will use this value when reporting data to the APM Server. If unset, the APM Agent will automatically set the value based on the Lambda function name. Use this config option if you want to group multiple Lambda functions under a single service entity in APM.

=== `ELASTIC_APM_DATA_RECEIVER_TIMEOUT_SECONDS`
The APM Lambda Extension's timeout value, in seconds, for receiving data from the APM Agent. The _default_ is `15`.

=== `ELASTIC_APM_DATA_RECEIVER_SERVER_PORT`
The port on which the APM Lambda Extension listens to receive data from the APM Agent. The _default_ is `8200`.

=== `ELASTIC_APM_DATA_FORWARDER_TIMEOUT_SECONDS`
The timeout value, in seconds, for the Lambda Extension's HTTP client sending data to the APM Server. The _default_ is `3`. If the Extension's attempt to send APM data during this time interval is not successful, the extension queues back the data. Further attempts at sending the data are governed by an exponential backoff algorithm: data will be sent after a increasingly large grace period of 0, then circa 1, 4, 9, 16, 25 and 36 seconds, provided that the Lambda function execution is ongoing.

=== `ELASTIC_APM_SEND_STRATEGY`
Whether to synchronously flush APM agent data from the extension to the APM Server at the end of the function invocation.
The two accepted values are `background` and `syncflush`. The _default_ is `syncflush`.

* The `background` strategy indicates that the extension will not flush when it receives a signal that the function invocation
has completed. It will instead send any remaining buffered data on the next function invocation. The result is that, if the
function is not subsequently invoked for that Lambda environment, the buffered data will be lost. However, for lambda functions
that have a steadily frequent load pattern the extension could delay sending the data to the APM Server to the next lambda
request and do the sending in parallel to the processing of that next request. This potentially would improve both the lambda
function response time and its throughput.
* The other value, `syncflush` will synchronously flush all remaining buffered APM agent data to the APM Server when the
extension receives a signal that the function invocation has completed. This strategy blocks the lambda function from receiving
the next request until the extension has flushed all the data. This has a negative effect on the throughput of the function,
though it ensures that all APM data is sent to the APM server.

=== `ELASTIC_APM_LOG_LEVEL`
The logging level to be used by both the APM Agent and the Lambda Extension. Supported values are `trace`, `debug`, `info`, `warning`, `error`, `critical` and `off`.

[[aws-lambda-secrets-manager]]
== Using AWS Secrets Manager to manage APM authentication keys
When using the config options <<aws-lambda-config-authentication-keys>> for authentication of the APM Lambda Extension with Elastic APM, the corresponding keys are specified in plain text in the environment variables of your Lambda function. If you prefer to securely store the authentication keys, you can use the AWS Secrets Manager and let the APM Lambda Extension retrieve the actual keys from the AWS Secrets Manager. Follow the instructions below to set up the AWS Secrets Manager with the APM Lambda Extension.

[[aws-lambda-secrets-manager-create-secret]]
=== Step 1: Create a secret in the AWS Secrets Manager.
https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_secret.html[Create a secret in the AWS Secrets Manager] for the {apm-guide-ref}/secret-token.html[APM Secret Token] or the {apm-guide-ref}/api-key.html[APM API key], depending on which one you prefer to use. Make sure to create the secret as a *Plaintext* typed secret and ensure it is created *in the same AWS region* as your target Lambda function that will use the secret. 

We recommend using the AWS-managed encryption key `aws/secretsmanager`. However, you can optionally create and select a custom KMS key for encryption. Note that with a custom encryption key, you will need additional key permissions on your Lambda function (see <<aws-lambda-secrets-manager-permissions, Step 2>>).

include::./secrets-manager/create-secret-widget.asciidoc[]

Remember your chosen secret name. You will use the secret name as the value for the config options <<aws-lambda-config-secrets-manager-options>> when configuring your APM Lambda Extension.

[[aws-lambda-secrets-manager-permissions]]
=== Step 2: Add permissions to your AWS Lambda function
For your Lambda function to be able to retrieve the authentication key from the AWS Secrets Manager, you need to provide the following permissions to your Lambda function.

include::./secrets-manager/add-permissions-widget.asciidoc[]

=== Step 3: Configure the APM Lambda extension
Finally, you will need to configure the APM Lambda extension to use the secret from the Secrets Manager _instead of_ the value provided through <<aws-lambda-config-authentication-keys>>.

Provide the name of the secret you created in <<aws-lambda-secrets-manager-create-secret, Step 1>> as the value for the <<aws-lambda-config-secrets-manager-options>> config option, respectively, depending on whether you want to use the {apm-guide-ref}/secret-token.html[APM Secret Token] or the {apm-guide-ref}/api-key.html[APM API key]. 

The language-specific instructions describe how to set environment variables for configuring AWS Lambda for Elastic APM:

* {apm-node-ref}/lambda.html#_step_3_configure_apm_on_aws_lambda[Configure APM on AWS Lambda - Node.js]
* {apm-py-ref}/lambda-support.html#_step_3_configure_apm_on_aws_lambda[Configure APM on AWS Lambda - Python]
* {apm-java-ref}/aws-lambda.html#_step_3_configure_apm_on_aws_lambda[Configure APM on AWS Lambda - Java]

That's it. With the first invocation (cold start) of your Lambda function you should see a log message from the APM Lambda extension indicating that a secret from the secrets manager is used:

[source, yml]
----
"Using the APM secret token retrieved from Secrets Manager."
----