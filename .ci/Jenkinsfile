#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO = 'apm-aws-lambda'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    PIPELINE_LOG_LEVEL = 'INFO'
    SUFFIX_ARN_FILE = 'arn-file.md'
    RELEASE_URL_MESSAGE = "(<https://github.com/elastic/${env.REPO}/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
    SLACK_CHANNEL = '#observablt-bots'
    NOTIFY_TO = 'victor.martinez@elastic.co'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        whenTrue(isTag()) {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release tag *${env.TAG_NAME}* has been created", body: "Build: (<${env.RUN_DISPLAY_URL}|here>) for further details.")
        }
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        setEnvVar('ELASTIC_LAYER_NAME', "elastic-apm-extension${getVersion()}")
      }
    }
    stage('Release') {
      options { skipDefaultCheckout() }
      stages {
        stage('BuildPublish') {
          failFast false
          matrix {
            agent {label "${PLATFORM}"}
            options { skipDefaultCheckout() }
            axes {
              axis {
                name 'PLATFORM'
                values 'arm', 'ubuntu-18 && immutable'
              }
            }
            stages {
              stage('Dist') {
                steps {
                  withGithubNotify(context: "Dist-${PLATFORM}") {
                    deleteDir()
                    unstash 'source'
                    withGoEnv(){
                      dir("${BASE_DIR}/apm-lambda-extension"){
                        cmd(label: 'make dist', script: 'BRANCH_NAME=v0.0.3 make dist')
                      }
                    }
                  }
                }
              }
              stage('Publish') {
                steps {
                  withGithubNotify(context: "Publish-${PLATFORM}") {
                    withGoEnv(){
                      withAWSEnv(secret: 'secret/observability-team/ci/service-account/apm-aws-lambda', forceInstallation: true, version: '2.4.10') {
                        dir("${BASE_DIR}/apm-lambda-extension"){
                          cmd(label: 'make publish-in-all-aws-regions', script: 'BRANCH_NAME=v0.0.3 make publish-in-all-aws-regions')
                          cmd(label: 'make create-arn-file', script: 'BRANCH_NAME=v0.0.3 make create-arn-file')
                          stash(includes: "*${SUFFIX_ARN_FILE}", name: "arn-${isArm() ? 'arm' : 'amd'}")
                          stash(includes: "bin/v0.0.3-*.zip", name: "dist-${isArm() ? 'arm' : 'amd'}")
                        }
                      }
                    }
                  }
                }
                post {
                  always {
                    archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/apm-lambda-extension/.regions")
                    archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/apm-lambda-extension/*${SUFFIX_ARN_FILE}")
                    archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/apm-lambda-extension/.aws")
                  }
                }
              }
            }
          }
        }
        stage('Release Notes') {
          steps {
            withGhEnv(forceInstallation: true, version: '2.4.0') {
              dir("${BASE_DIR}/apm-lambda-extension"){
                unstash "arn-arm"
                unstash "arn-amd"
                unstash "dist-arm"
                unstash "dist-amd"
                cmd(label: 'make release-notes', script: 'BRANCH_NAME=v0.0.3 make release-notes')
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
    success {
      whenTrue(isTag()) {
        notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
      }
    }
    unsuccessful {
      whenTrue(isTag()) {
        notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* could not be published.", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
      }
    }
  }
}

/**
* Transform TAG releases from v{major}.{minor}.{patch} to
* ver-{major}-{minor}-{patch}. f.i: given v1.2.3 then
* -ver-1-2-3.
*/
def getVersion() {
  if ('v0.0.3'.trim() && 'v0.0.3'.startsWith('v')) {
    return 'v0.0.3'.replaceAll('v', '-ver').replaceAll('\\.', '-')
  }
  return ''
}

def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}
