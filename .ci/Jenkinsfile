#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO = 'apm-aws-lambda'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    PIPELINE_LOG_LEVEL = 'INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i)(.*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*|^/test$)')
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          withGoEnv(){
            dir("${BASE_DIR}/apm-lambda-extension"){
              sh(label: 'lint', script: '''
                go mod tidy && git diff --exit-code
                gofmt -l . | read && echo "Code differs from gofmt's style. Run 'gofmt -w .'" 1>&2 && exit 1 || true
              ''')
              sh(label: 'Go vet', script: 'go vet')
            }
          }
        }
      }
    }
    stage('Test') {
      failFast false
      matrix {
        agent {label "${PLATFORM}"}
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PLATFORM'
            values 'macosx && x86_64', 'ubuntu-18 && immutable'
          }
          axis {
            name 'GO_VERSION'
            values '1.14', '1.15', '1.16'
          }
        }
        stages {
          stage('Build'){
            steps {
              withGithubNotify(context: "Build-${GO_VERSION}-${PLATFORM}") {
                deleteDir()
                unstash 'source'
                withGoEnv(){
                  dir("${BASE_DIR}/apm-lambda-extension"){
                    cmd(label: 'Go build', script: 'go build')
                  }
                }
              }
            }
          }
          stage('Test') {
            steps {
              withGithubNotify(context: "Test-${GO_VERSION}-${PLATFORM}") {
                deleteDir()
                unstash 'source'
                withGoEnv(){
                  dir("${BASE_DIR}/apm-lambda-extension"){
                    goTestJUnit(options: '-v ./...', output: 'junit-report.xml')
                  }
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
